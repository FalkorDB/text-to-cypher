name: Cleanup Old Releases

on:
  release:
    types: [published]
  workflow_run:
    workflows: ["docker-release"]
    types:
      - completed
    branches: [master]
  workflow_dispatch:
    inputs:
      keep_releases:
        description: 'Number of stable releases to keep'
        required: true
        default: '10'
        type: number
      keep_prereleases:
        description: 'Number of prereleases to keep'
        required: true
        default: '1'
        type: number

permissions:
  contents: write

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Check if cleanup should run
        id: should_run
        run: |
          # For manual runs, always run
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "reason=Manual cleanup" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # For release events, only run if it's a prerelease
          if [ "${{ github.event_name }}" = "release" ] && [ "${{ github.event.release.prerelease }}" = "true" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "reason=New prerelease published: ${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # For workflow_run, check if it was triggered by a successful docker release
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            # Only proceed if the workflow run was successful
            if [ "${{ github.event.workflow_run.conclusion }}" != "success" ]; then
              echo "Docker release workflow was not successful, skipping cleanup"
              echo "should_run=false" >> $GITHUB_OUTPUT
              echo "reason=Docker release workflow failed, skipping cleanup" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            # For docker-release workflow, we can get the tag from the workflow name or triggering event
            # The docker-release workflow should have been triggered by a release event
            echo "Docker release workflow completed successfully"
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "reason=Docker release workflow completed successfully" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "should_run=false" >> $GITHUB_OUTPUT
          echo "reason=Not a release event or manual trigger, skipping cleanup" >> $GITHUB_OUTPUT

      - name: Cleanup old releases
        if: steps.should_run.outputs.should_run == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            console.log("üßπ Starting release cleanup...");
            console.log("Trigger reason: ${{ steps.should_run.outputs.reason }}");
            
            const keepReleases = ${{ github.event.inputs.keep_releases || 10 }};
            const keepPrereleases = ${{ github.event.inputs.keep_prereleases || 1 }};
            
            console.log(`Configuration: Keep ${keepReleases} stable releases, ${keepPrereleases} prereleases per type (alpha/beta/rc)`);
            
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            // Sort releases by creation date (newest first)
            const sortedReleases = releases.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            
            // Separate stable releases from prereleases
            const stableReleases = sortedReleases.filter(release => !release.prerelease);
            const allPrereleases = sortedReleases.filter(release => release.prerelease);
            
            // Further categorize prereleases by type
            const alphaReleases = allPrereleases.filter(r => r.tag_name.includes('-alpha'));
            const betaReleases = allPrereleases.filter(r => r.tag_name.includes('-beta'));
            const rcReleases = allPrereleases.filter(r => r.tag_name.includes('-rc'));
            const otherPrereleases = allPrereleases.filter(r => 
              !r.tag_name.includes('-alpha') && 
              !r.tag_name.includes('-beta') && 
              !r.tag_name.includes('-rc')
            );
            
            // Determine which releases to delete
            const stableToDelete = stableReleases.slice(keepReleases);
            const alphaToDelete = alphaReleases.slice(keepPrereleases);
            const betaToDelete = betaReleases.slice(keepPrereleases);
            const rcToDelete = rcReleases.slice(keepPrereleases);
            const otherPrereleasesToDelete = otherPrereleases.slice(keepPrereleases);
            
            const releasesToDelete = [
              ...stableToDelete, 
              ...alphaToDelete, 
              ...betaToDelete, 
              ...rcToDelete, 
              ...otherPrereleasesToDelete
            ];
            
            console.log(`Found ${releases.length} total releases:`);
            console.log(`  - ${stableReleases.length} stable releases (keeping latest ${keepReleases})`);
            console.log(`  - ${alphaReleases.length} alpha releases (keeping latest ${keepPrereleases})`);
            console.log(`  - ${betaReleases.length} beta releases (keeping latest ${keepPrereleases})`);
            console.log(`  - ${rcReleases.length} RC releases (keeping latest ${keepPrereleases})`);
            console.log(`  - ${otherPrereleases.length} other prereleases (keeping latest ${keepPrereleases})`);
            console.log(`Deleting ${releasesToDelete.length} old releases`);
            console.log(`  - ${stableToDelete.length} stable releases`);
            console.log(`  - ${alphaToDelete.length} alpha releases`);
            console.log(`  - ${betaToDelete.length} beta releases`);
            console.log(`  - ${rcToDelete.length} RC releases`);
            console.log(`  - ${otherPrereleasesToDelete.length} other prereleases`);
            
            if (releasesToDelete.length === 0) {
              console.log('No releases to delete');
              return;
            }
            
            let deletedCount = 0;
            let failedCount = 0;
            
            for (const release of releasesToDelete) {
              try {
                const releaseType = release.prerelease ? 'prerelease' : 'stable';
                console.log(`Deleting ${releaseType}: ${release.tag_name} (${release.name}) created ${release.created_at}`);
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id
                });
                
                console.log(`‚úÖ Deleted ${releaseType}: ${release.tag_name}`);
                deletedCount++;
              } catch (error) {
                console.log(`‚ùå Failed to delete release ${release.tag_name}: ${error.message}`);
                failedCount++;
              }
            }
            
            console.log(`\nüìä Cleanup Summary:`);
            console.log(`‚úÖ Successfully deleted: ${deletedCount} releases`);
            console.log(`‚ùå Failed to delete: ${failedCount} releases`);
            console.log(`üéØ Stable releases remaining: ${stableReleases.length - stableToDelete.length}`);
            console.log(`üéØ Alpha releases remaining: ${alphaReleases.length - alphaToDelete.length}`);
            console.log(`üéØ Beta releases remaining: ${betaReleases.length - betaToDelete.length}`);
            console.log(`üéØ RC releases remaining: ${rcReleases.length - rcToDelete.length}`);
            console.log(`üéØ Other prereleases remaining: ${otherPrereleases.length - otherPrereleasesToDelete.length}`);
            console.log(`üéØ Total releases remaining: ${releases.length - deletedCount}`);
