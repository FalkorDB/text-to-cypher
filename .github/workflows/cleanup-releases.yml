name: Cleanup Old Releases

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      keep_releases:
        description: 'Number of stable releases to keep'
        required: true
        default: '10'
        type: number
      keep_prereleases:
        description: 'Number of prereleases to keep'
        required: true
        default: '1'
        type: number

permissions:
  contents: write

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup old releases
        uses: actions/github-script@v7
        with:
          script: |
            const keepReleases = ${{ github.event.inputs.keep_releases || 10 }};
            const keepPrereleases = ${{ github.event.inputs.keep_prereleases || 1 }};
            
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            // Sort releases by creation date (newest first)
            const sortedReleases = releases.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            
            // Separate stable releases from prereleases
            const stableReleases = sortedReleases.filter(release => !release.prerelease);
            const prereleases = sortedReleases.filter(release => release.prerelease);
            
            // Determine which releases to delete
            const stableToDelete = stableReleases.slice(keepReleases);
            const prereleasesToDelete = prereleases.slice(keepPrereleases);
            const releasesToDelete = [...stableToDelete, ...prereleasesToDelete];
            
            console.log(`Found ${releases.length} total releases:`);
            console.log(`  - ${stableReleases.length} stable releases (keeping latest ${keepReleases})`);
            console.log(`  - ${prereleases.length} prereleases (keeping latest ${keepPrereleases})`);
            console.log(`Deleting ${releasesToDelete.length} old releases (${stableToDelete.length} stable + ${prereleasesToDelete.length} prereleases)`);
            
            if (releasesToDelete.length === 0) {
              console.log('No releases to delete');
              return;
            }
            
            let deletedCount = 0;
            let failedCount = 0;
            
            for (const release of releasesToDelete) {
              try {
                const releaseType = release.prerelease ? 'prerelease' : 'stable';
                console.log(`Deleting ${releaseType}: ${release.tag_name} (${release.name}) created ${release.created_at}`);
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id
                });
                
                // Also delete the associated tag
                try {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `tags/${release.tag_name}`
                  });
                  console.log(`‚úÖ Deleted ${releaseType} and tag: ${release.tag_name}`);
                  deletedCount++;
                } catch (tagError) {
                  console.log(`‚ö†Ô∏è  Deleted ${releaseType} but failed to delete tag ${release.tag_name}: ${tagError.message}`);
                  deletedCount++;
                }
              } catch (error) {
                console.log(`‚ùå Failed to delete release ${release.tag_name}: ${error.message}`);
                failedCount++;
              }
            }
            
            console.log(`\nüìä Cleanup Summary:`);
            console.log(`‚úÖ Successfully deleted: ${deletedCount} releases`);
            console.log(`‚ùå Failed to delete: ${failedCount} releases`);
            console.log(`üéØ Stable releases remaining: ${stableReleases.length - stableToDelete.length}`);
            console.log(`üéØ Prereleases remaining: ${prereleases.length - prereleasesToDelete.length}`);
            console.log(`üéØ Total releases remaining: ${releases.length - deletedCount}`);
